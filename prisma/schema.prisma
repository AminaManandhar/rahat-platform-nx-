generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "rahat-system-model.dbml"
  projectName         = "Rahat System"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "Rahat System"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  UNKNOWN
}

enum BANK_STATUS {
  UNKNOWN
  UNBANKED
  BANKED
  UNDERBANKED
}

enum PHONE_STATUS {
  UNKNOWN
  NO_PHONE
  FEATURE_PHONE
  SMART_PHONE
}

enum INTERNET_STATUS {
  UNKNOWN
  NO_INTERNET
  PHONE_INTERNET
  HOME_INTERNET
}

enum TxStatus {
  NEW
  PENDING
  SUCCESS
  FAIL
  ERROR
}

model AppSettings {
  id        Int      @id @default(autoincrement())
  name      String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  walletAddress Bytes?    @unique
  profileImage  String?

  projects Project[] @relation("UserProjects")
}

model Project {
  id              Int       @id @default(autoincrement())
  name            String
  startDate       DateTime
  endDate         DateTime
  budget          Int       @default(0)
  disbursed       Int       @default(0)
  extras          Json?
  location        String?
  projectType     String?
  projectManager  String?
  description     String?
  contractAddress Bytes?    @unique
  deletedAt       DateTime?
  isApproved      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  owner         User[]        @relation("UserProjects")
  beneficiaries Beneficiary[] @relation("BeneficiaryProjects")
  vendors       Distributor[] @relation("ProjectDistributors")
}

model Beneficiary {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid())
  name           String
  gender         Gender          @default(UNKNOWN)
  walletAddress  Bytes?          @unique
  phone          String?
  email          String?
  dob            DateTime?
  isApproved     Boolean
  address        Json
  tokensAssigned Int             @default(0)
  tokensClaimed  Int             @default(0)
  bankStatus     BANK_STATUS     @default(UNKNOWN)
  phoneStatus    PHONE_STATUS    @default(UNKNOWN)
  internetStatus INTERNET_STATUS @default(UNKNOWN)
  latitude       Float
  longitude      Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?

  projects Project[] @relation("BeneficiaryProjects")
}

model Distributor {
  id             Int       @id @default(autoincrement())
  name           String
  walletAddress  Bytes?    @unique
  phone          String?
  email          String?
  address        Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  isActive       Boolean   @default(false)
  tokenBalance   Int       @default(0)
  tokenPending   Int       @default(0)
  tokenDisbursed Int       @default(0)

  projects Project[] @relation("ProjectDistributors")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  txHash          Bytes    @unique
  txStatus        TxStatus @default(NEW)
  contractAddress String?
  timestamp       Int?
  method          String?
  methodParams    Json[]
  blockNumber     Int?
  from            String?
  to              String?
  value           String?
  remarks         String?
  events          Json     @default("{}")

  @@map(name: "tbl_transactions")
}
